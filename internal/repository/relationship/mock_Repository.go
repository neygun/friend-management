// Code generated by mockery v2.38.0. DO NOT EDIT.

package relationship

import (
	context "context"

	model "github.com/neygun/friend-management/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, relationship
func (_m *MockRepository) Create(ctx context.Context, relationship model.Relationship) (model.Relationship, error) {
	ret := _m.Called(ctx, relationship)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.Relationship
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Relationship) (model.Relationship, error)); ok {
		return rf(ctx, relationship)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Relationship) model.Relationship); ok {
		r0 = rf(ctx, relationship)
	} else {
		r0 = ret.Get(0).(model.Relationship)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Relationship) error); ok {
		r1 = rf(ctx, relationship)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCriteria provides a mock function with given fields: ctx, filter
func (_m *MockRepository) GetByCriteria(ctx context.Context, filter model.RelationshipFilter) ([]model.Relationship, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetByCriteria")
	}

	var r0 []model.Relationship
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RelationshipFilter) ([]model.Relationship, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.RelationshipFilter) []model.Relationship); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Relationship)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.RelationshipFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommonFriends provides a mock function with given fields: ctx, user1ID, user2ID
func (_m *MockRepository) GetCommonFriends(ctx context.Context, user1ID int64, user2ID int64) ([]string, error) {
	ret := _m.Called(ctx, user1ID, user2ID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommonFriends")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]string, error)); ok {
		return rf(ctx, user1ID, user2ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []string); ok {
		r0 = rf(ctx, user1ID, user2ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, user1ID, user2ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailsReceivingUpdates provides a mock function with given fields: ctx, senderID, mentionedUserIDs
func (_m *MockRepository) GetEmailsReceivingUpdates(ctx context.Context, senderID int64, mentionedUserIDs []int64) ([]string, error) {
	ret := _m.Called(ctx, senderID, mentionedUserIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailsReceivingUpdates")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64) ([]string, error)); ok {
		return rf(ctx, senderID, mentionedUserIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64) []string); ok {
		r0 = rf(ctx, senderID, mentionedUserIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []int64) error); ok {
		r1 = rf(ctx, senderID, mentionedUserIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFriendsList provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetFriendsList(ctx context.Context, id int64) ([]string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFriendsList")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []string); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExistBlock provides a mock function with given fields: ctx, userIDs
func (_m *MockRepository) IsExistBlock(ctx context.Context, userIDs []int64) (bool, error) {
	ret := _m.Called(ctx, userIDs)

	if len(ret) == 0 {
		panic("no return value specified for IsExistBlock")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) (bool, error)); ok {
		return rf(ctx, userIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) bool); ok {
		r0 = rf(ctx, userIDs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, userIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, relationship
func (_m *MockRepository) Update(ctx context.Context, relationship model.Relationship) (model.Relationship, error) {
	ret := _m.Called(ctx, relationship)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 model.Relationship
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Relationship) (model.Relationship, error)); ok {
		return rf(ctx, relationship)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Relationship) model.Relationship); ok {
		r0 = rf(ctx, relationship)
	} else {
		r0 = ret.Get(0).(model.Relationship)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Relationship) error); ok {
		r1 = rf(ctx, relationship)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
