// Code generated by mockery v2.38.0. DO NOT EDIT.

package authentication

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// AddTokenToBlacklist provides a mock function with given fields: ctx, token, expiration
func (_m *MockRepository) AddTokenToBlacklist(ctx context.Context, token string, expiration time.Duration) error {
	ret := _m.Called(ctx, token, expiration)

	if len(ret) == 0 {
		panic("no return value specified for AddTokenToBlacklist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(ctx, token, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckBlacklistedToken provides a mock function with given fields: ctx, token
func (_m *MockRepository) CheckBlacklistedToken(ctx context.Context, token string) (bool, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for CheckBlacklistedToken")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
