// Code generated by mockery v2.38.0. DO NOT EDIT.

package relationship

import (
	context "context"

	model "github.com/neygun/friend-management/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CreateBlock provides a mock function with given fields: ctx, input
func (_m *MockService) CreateBlock(ctx context.Context, input CreateBlockInput) (model.Relationship, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlock")
	}

	var r0 model.Relationship
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateBlockInput) (model.Relationship, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateBlockInput) model.Relationship); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(model.Relationship)
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateBlockInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFriendConnection provides a mock function with given fields: ctx, input
func (_m *MockService) CreateFriendConnection(ctx context.Context, input FriendConnectionInput) (model.Relationship, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateFriendConnection")
	}

	var r0 model.Relationship
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, FriendConnectionInput) (model.Relationship, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, FriendConnectionInput) model.Relationship); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(model.Relationship)
	}

	if rf, ok := ret.Get(1).(func(context.Context, FriendConnectionInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: ctx, input
func (_m *MockService) CreateSubscription(ctx context.Context, input CreateSubscriptionInput) (model.Relationship, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 model.Relationship
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateSubscriptionInput) (model.Relationship, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateSubscriptionInput) model.Relationship); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(model.Relationship)
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateSubscriptionInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommonFriends provides a mock function with given fields: ctx, input
func (_m *MockService) GetCommonFriends(ctx context.Context, input GetCommonFriendsInput) ([]string, int, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetCommonFriends")
	}

	var r0 []string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, GetCommonFriendsInput) ([]string, int, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetCommonFriendsInput) []string); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetCommonFriendsInput) int); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, GetCommonFriendsInput) error); ok {
		r2 = rf(ctx, input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetEmailsReceivingUpdates provides a mock function with given fields: ctx, input
func (_m *MockService) GetEmailsReceivingUpdates(ctx context.Context, input GetEmailsReceivingUpdatesInput) ([]string, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailsReceivingUpdates")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetEmailsReceivingUpdatesInput) ([]string, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetEmailsReceivingUpdatesInput) []string); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetEmailsReceivingUpdatesInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFriendsList provides a mock function with given fields: ctx, input
func (_m *MockService) GetFriendsList(ctx context.Context, input GetFriendsInput) ([]string, int, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetFriendsList")
	}

	var r0 []string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, GetFriendsInput) ([]string, int, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetFriendsInput) []string); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetFriendsInput) int); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, GetFriendsInput) error); ok {
		r2 = rf(ctx, input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
